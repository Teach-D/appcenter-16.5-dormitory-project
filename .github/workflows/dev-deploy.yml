name: Build and (conditionally) Deploy

on:
  push:
    branches:
      - '**'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Create application.yml
        run: |
          mkdir -p ./src/main/resources
          echo "${{ secrets.APPLICATION_YML }}" > ./src/main/resources/application.yml

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build project
        run: ./gradlew clean build

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE }}:latest .

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Push Docker image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE }}:latest

  deploy:
    if: github.ref == 'refs/heads/dev'
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: SSH to server & deploy
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            # 기존 컨테이너 중지 및 제거
            docker stop ${{ secrets.DOCKER_IMAGE }} || true
            docker rm ${{ secrets.DOCKER_IMAGE }} || true
            
            # 해당 이미지만 삭제 (다른 이미지에 영향 없음)
            docker rmi ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE }}:latest || true
            
            # Docker 이미지 Pull
            docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE }}:latest
            
            # Docker Volume 생성 (이미 존재하면 무시됨)
            docker volume create inu-dormitory-images || true
            docker volume create inu-dormitory-uploads || true
            docker volume create inu-dormitory-logs || true
            
            docker network create inu-network || true
            docker network connect inu-network inu-dormitory-dev-mysql || true
            
            docker run -d --name ${{ secrets.DOCKER_IMAGE }} \
              --network inu-network \
              -p 8055:8080 \
              -v inu-dormitory-images:/app/images \
              -v inu-dormitory-uploads:/app/files \
              -v inu-dormitory-logs:/app/logs \
              --restart unless-stopped \
              ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE }}:latest